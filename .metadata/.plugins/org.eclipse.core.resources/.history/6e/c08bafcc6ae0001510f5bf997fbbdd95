package cmsc433.p2;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Ratsies
{
	// Singleton Class
	
	private static Ratsies instance = new Ratsies();
	private int numSeats;
	private ArrayList<Cook> cooks;
	private ArrayList<Machine> machines;
	private ArrayList<Customer> customers;

	private Object lockCustomer = new Object();
	private Object lockOrder = new Object();
	
	/**
	 * Precondition: None
	 * Postcondition: Creation of a single instance
	 * Immutable: N/A
	 * 
	 * A blank constructor for a singleton
	 */
	private Ratsies()
	{
		
	}
	
	/**
	 * Returns the singleton Ratsies instance
	 * 
	 * @return
	 */
	public static Ratsies getInstance()
	{
		return instance;
	}
	
	public void init(int s, int c, ArrayList<Machine> m)
	{
		numSeats = s;
		customers = new ArrayList<Customer>(numSeats);
		cooks = new ArrayList<Cook>(c);
		for (int i = 0; i < c; i++)
		{
			cooks.add(new Cook("Cook" + i));
		}
		machines = m;
	}
	
	public synchronized boolean enter(Customer c) throws InterruptedException
	{
		while (customers.size() >= numSeats)
		{
			wait();
		}
		
		if (customers.contains(c))
		{
			return false;
		}
		
		customers.add(c);
		Simulation.events.add(SimulationEvent.customerEnteredRatsies(c));
		notifyAll();
		
		return true;
	}
	
	public synchronized Customer sendOrder() throws InterruptedException
	{
		while (customers.size() <= 0)
		{
			wait();
		}
		
		return null;
	}
	
}
