package cmsc433.p2;

import java.util.Collections;
import java.util.List;

/**
 * Cooks are simulation actors that have at least one field, a name. When
 * running, a cook attempts to retrieve outstanding orders placed by Eaters and
 * process them.
 */
public class Cook extends Thread implements Runnable 
{
	private final String name;
	private int orderNum;
	
	private int numSodas;
	private int numWings;
	private int numSubs;
	private int numPizzas;
	
	private List<Food> order;
	private Simulation sim = Simulation.getInstance();
	
	/**
	 * You can feel free to modify this constructor. It must take at least the
	 * name, but may take other parameters if you would find adding them useful.
	 *
	 * @param: the name of the cook
	 */
	public Cook(String name)
	{
		this.name = name;
	}

	public String toString()
	{
		return name;
	}
	
	
	private void processOrder()
	{
		for (Food f: order)
		{
			sim.logEvent(SimulationEvent.cookStartedFood(this, f, orderNum));
			switch(f.name)
			{
				case "soda":
					sim.makeSoda(name);
					break;
				case "wings":
					sim.makeWings(name);
					break;
				case "sub":
					sim.makeSub(name);
					break;
				case "pizza":
					sim.makePizza(name);
					break;
				default:
					break;
			}
		}
	}
	
	private void grabOrder()
	{
		for (Food f: order)
		{
			switch (f.name)
			{
				case "soda":
					sim.grabSoda(name);
					break;
				case "wings":
					sim.grabWings(name);
					break;
				case "sub":
					sim.grabSub(name);
					break;
				case "pizza":
					sim.grabPizza(name);
					break;
				default:
					break;
			}
		}
	}
	

	/**
	 * This method executes as follows. The cook tries to retrieve orders placed
	 * by Customers. For each order, a List<Food>, the cook submits each Food
	 * item in the List to an appropriate Machine, by calling makeFood(). Once
	 * all machines have produced the desired Food, the order is complete, and
	 * the Customer is notified. The cook can then go to process the next order.
	 * If during its execution the cook is interrupted (i.e., some other thread
	 * calls the interrupt() method on it, which could raise
	 * InterruptedException if the cook is blocking), then it terminates.
	 */
	public void run()
	{
		try
		{
			Simulation.logEvent(SimulationEvent.cookStarting(this));
			while (true)
			{
				// YOUR CODE GOES HERE...
				
				orderNum = sim.pullOrder();
				Simulation.logEvent(SimulationEvent.cookReceivedOrder(this, order, orderNum));
				order = sim.lookUp(orderNum);
				
				processOrder();
				grabOrder();
				
				sim.readyOrder(orderNum);
				Simulation.logEvent(SimulationEvent.cookCompletedOrder(this, orderNum));
				//TODO: remove after implementation
			}
		}
		catch (InterruptedException e)
		{
			// This code assumes the provided code in the Simulation class
			// that interrupts each cook thread when all customers are done.
			// You might need to change this if you change how things are
			// done in the Simulation class.
			Simulation.logEvent(SimulationEvent.cookEnding(this));
		}
	}
}